name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  # 任务1：只创建 Tag。只在 main 分支 push 时运行。
  create-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      
      - name: Get version from package.json
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Create Tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const version = '${{ steps.package-version.outputs.version }}'
            const tagName = `v${version}`
            
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`
              })
              console.log(`Tag ${tagName} already exists.`)
            } catch (error) {
              const sha = context.sha
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: sha
              })
              console.log(`Created tag ${tagName} at ${sha}`)
            }

  # 任务2：并行构建，并上传构建产物（artifacts）
  build-and-upload:
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        node-version: [24.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Build application
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          yarn build:mac --universal
        else
          yarn build:win
        fi
      shell: bash
    
    # 这一步是关键！上传构建产物，而不是直接发布到 Release
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build-artifacts
        path: dist/

  # 任务3：在所有构建任务成功后，统一创建 Release 并上传所有附件
  release-after-build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    # 这个任务依赖于所有的构建任务
    needs: build-and-upload
    permissions:
      contents: write
    
    steps:
      # 下载所有构建产物
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: List downloaded artifacts
        run: ls -R

      # 创建 Release 并上传所有附件
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            macos-latest-build-artifacts/*.dmg
            windows-latest-build-artifacts/*.exe
            macos-latest-build-artifacts/latest*.yml
            windows-latest-build-artifacts/latest*.yml
          tag_name: ${{ github.ref }}
          name: ${{ github.ref }}
          draft: false
          prerelease: false
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
  
  # # 发布到GitHub Packages
  # publish-package:
  #   needs: [create-release, release]
  #   if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         token: ${{ secrets.GH_TOKEN }}
      
  #     - name: Use Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '24.x'
  #         registry-url: 'https://npm.pkg.github.com'
  #         scope: '@sun-guannan'
  #         cache: 'yarn'
      
  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile
      
  #     - name: Create .npmrc file
  #       run: |
  #         echo "@sun-guannan:registry=https://npm.pkg.github.com/" > .npmrc
  #         echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
      
  #     - name: Configure package for GitHub Packages
  #       run: |
  #         # 确保包名与仓库名完全匹配（包括大小写）
  #         node -e "const pkg=require('./package.json'); pkg.name='@sun-guannan/capcutmaker'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2))"
      
  #     - name: Publish to GitHub Packages
  #       run: npm publish --access=public
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}
  
  # # 上传自动更新文件到 GitHub Releases
  # publish-update-files:
  #   needs: [create-release, release]
  #   if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         token: ${{ secrets.GH_TOKEN }}
      
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: ./artifacts
      
  #     - name: List downloaded artifacts
  #       run: find ./artifacts -type f | sort
      
  #     - name: Get version from package.json
  #       id: package-version
  #       run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: dist-${{ matrix.os }}
  #         path: |
  #           dist/*.exe
  #           dist/*.dmg
  #           dist/latest*.yml
  #           dist/latest*.yaml
      
  #     - name: Upload update files to release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: v${{ steps.package-version.outputs.version }}
  #         files: |
  #           ./artifacts/**/latest*.yml
  #           ./artifacts/**/latest*.yaml
  #         draft: false
  #         prerelease: false
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_TOKEN }}